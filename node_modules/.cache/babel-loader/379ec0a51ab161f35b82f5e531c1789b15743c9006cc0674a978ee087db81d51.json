{"ast":null,"code":"var _jsxFileName = \"E:\\\\Internship\\\\tp2\\\\src\\\\ProgBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ActBlock from './ActBlock';\nimport './ProgBar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgBar = () => {\n  _s();\n  const [calculatedValue, setCalculatedValue] = useState(0);\n\n  // Simulate a calculated value change (replace this with your actual calculation)\n  const updateCalculatedValue = () => {\n    const newValue = Math.floor(Math.random() * 100) + 1; // Random value between 1 and 100\n    setCalculatedValue(newValue);\n  };\n  const maxValue = 100; // Set the maximum value for the progress calculation\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ProgBar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Active Blocks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateCalculatedValue,\n      children: \"Update Calculated Value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActBlock, {\n      calculatedValue: calculatedValue,\n      maxValue: maxValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgBar, \"rQTEz8i+g4gjmtwj7S94zRGUbes=\");\n_c = ProgBar;\nexport default ProgBar;\nvar _c;\n$RefreshReg$(_c, \"ProgBar\");","map":{"version":3,"names":["React","useState","ActBlock","jsxDEV","_jsxDEV","ProgBar","_s","calculatedValue","setCalculatedValue","updateCalculatedValue","newValue","Math","floor","random","maxValue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["E:/Internship/tp2/src/ProgBar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ActBlock from './ActBlock';\r\nimport './ProgBar.css';\r\n\r\nconst ProgBar = () => {\r\n  const [calculatedValue, setCalculatedValue] = useState(0);\r\n\r\n  // Simulate a calculated value change (replace this with your actual calculation)\r\n  const updateCalculatedValue = () => {\r\n    const newValue = Math.floor(Math.random() * 100) + 1; // Random value between 1 and 100\r\n    setCalculatedValue(newValue);\r\n  };\r\n\r\n  const maxValue = 100; // Set the maximum value for the progress calculation\r\n\r\n  return (\r\n    <div className=\"ProgBar\">\r\n      <h3>Active Blocks</h3>\r\n      <button onClick={updateCalculatedValue}>Update Calculated Value</button>\r\n      <ActBlock calculatedValue={calculatedValue} maxValue={maxValue} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgBar;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;;EAEzD;EACA,MAAMQ,qBAAqB,GAAGA,CAAA,KAAM;IAClC,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtDL,kBAAkB,CAACE,QAAQ,CAAC;EAC9B,CAAC;EAED,MAAMI,QAAQ,GAAG,GAAG,CAAC,CAAC;;EAEtB,oBACEV,OAAA;IAAKW,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACtBZ,OAAA;MAAAY,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBhB,OAAA;MAAQiB,OAAO,EAAEZ,qBAAsB;MAAAO,QAAA,EAAC;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACxEhB,OAAA,CAACF,QAAQ;MAACK,eAAe,EAAEA,eAAgB;MAACO,QAAQ,EAAEA;IAAS;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/D,CAAC;AAEV,CAAC;AAACd,EAAA,CAlBID,OAAO;AAAAiB,EAAA,GAAPjB,OAAO;AAoBb,eAAeA,OAAO;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
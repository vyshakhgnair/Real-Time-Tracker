{"ast":null,"code":"var _jsxFileName = \"E:\\\\Internship\\\\tp2\\\\src\\\\ProgBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ActBlock from './ActBlock';\nimport axios from 'axios';\nimport './ProgBar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgBar = () => {\n  _s();\n  const [calculatedValue, setCalculatedValue] = useState(0);\n  const [TB, setTB] = useState(0);\n  // Simulate a calculated value change (replace this with your actual calculation)\n  const updateCalculatedValue = () => {\n    const newValue = Math.floor(Math.random() * 100) + 1; // Random value between 1 and 100\n    setCalculatedValue(newValue);\n  };\n  useEffect(() => {\n    async function fetchTotalBlocks() {\n      try {\n        const response = await axios.get('http://localhost:5000/totalBlocks'); // Use Axios for GET request\n        setTB(response.data.TB);\n      } catch (error) {\n        console.error('Error fetching data', error);\n      }\n    }\n    fetchTotalBlocks();\n  }, []);\n  const maxValue = 100; // Set the maximum value for the progress calculation\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ProgBar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Active Blocks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateCalculatedValue,\n      children: \"Update Calculated Value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActBlock, {\n      calculatedValue: calculatedValue,\n      maxValue: TB\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgBar, \"3rQdwNUWUf5yqFJhuoJwUTPJNMk=\");\n_c = ProgBar;\nexport default ProgBar;\nvar _c;\n$RefreshReg$(_c, \"ProgBar\");","map":{"version":3,"names":["React","useState","useEffect","ActBlock","axios","jsxDEV","_jsxDEV","ProgBar","_s","calculatedValue","setCalculatedValue","TB","setTB","updateCalculatedValue","newValue","Math","floor","random","fetchTotalBlocks","response","get","data","error","console","maxValue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["E:/Internship/tp2/src/ProgBar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ActBlock from './ActBlock';\r\nimport axios from 'axios'\r\nimport './ProgBar.css';\r\n\r\nconst ProgBar = () => {\r\n  const [calculatedValue, setCalculatedValue] = useState(0);\r\n  const [TB, setTB] = useState(0);\r\n  // Simulate a calculated value change (replace this with your actual calculation)\r\n  const updateCalculatedValue = () => {\r\n    const newValue = Math.floor(Math.random() * 100) + 1; // Random value between 1 and 100\r\n    setCalculatedValue(newValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalBlocks() {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/totalBlocks'); // Use Axios for GET request\r\n        setTB(response.data.TB);\r\n      } catch (error) {\r\n        console.error('Error fetching data', error);\r\n      }\r\n    }\r\n\r\n    fetchTotalBlocks();\r\n  }, []);\r\n\r\n  const maxValue = 100; // Set the maximum value for the progress calculation\r\n\r\n  return (\r\n    <div className=\"ProgBar\">\r\n      <h3>Active Blocks</h3>\r\n      <button onClick={updateCalculatedValue}>Update Calculated Value</button>\r\n      <ActBlock calculatedValue={calculatedValue} maxValue={TB} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgBar;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACU,EAAE,EAAEC,KAAK,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAC/B;EACA,MAAMY,qBAAqB,GAAGA,CAAA,KAAM;IAClC,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtDP,kBAAkB,CAACI,QAAQ,CAAC;EAC9B,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACd,eAAegB,gBAAgBA,CAAA,EAAG;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAC,mCAAmC,CAAC,CAAC,CAAC;QACvER,KAAK,CAACO,QAAQ,CAACE,IAAI,CAACV,EAAE,CAAC;MACzB,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C;IACF;IAEAJ,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,QAAQ,GAAG,GAAG,CAAC,CAAC;;EAEtB,oBACElB,OAAA;IAAKmB,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACtBpB,OAAA;MAAAoB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBxB,OAAA;MAAQyB,OAAO,EAAElB,qBAAsB;MAAAa,QAAA,EAAC;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACxExB,OAAA,CAACH,QAAQ;MAACM,eAAe,EAAEA,eAAgB;MAACe,QAAQ,EAAEb;IAAG;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzD,CAAC;AAEV,CAAC;AAACtB,EAAA,CA/BID,OAAO;AAAAyB,EAAA,GAAPzB,OAAO;AAiCb,eAAeA,OAAO;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}